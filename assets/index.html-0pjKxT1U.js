import{_ as e,e as p,f as s,g as o,h as a,i as c,j as l,r as i,o as u}from"./app-CyumRmGQ.js";const r={};function d(k,n){const t=i("RouteLink");return u(),p("div",null,[n[7]||(n[7]=s("h1",{id:"random-number-generator-rng",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#random-number-generator-rng"},[s("span",null,"Random Number Generator (RNG)")])],-1)),n[8]||(n[8]=s("p",null,[a("The Random Number Generator (RNG) algorithm for the original-games engine is designed to generate a deterministic stream of bytes based on these given input parameters: "),s("code",null,"serverSeed"),a(", "),s("code",null,"clientSeed"),a(", "),s("code",null,"nonce"),a(", and "),s("code",null,"cursor"),a(". This algorithm leverages HMAC-SHA256 hashing to produce a pseudo-random sequence of bytes. These bytes could then be cast to floating point values. This is the basis of the number generator of any game built on top of this engine.")],-1)),s("p",null,[n[1]||(n[1]=a("The RNG algorithm for the original-games engine is developed in Go (part of the ")),c(t,{to:"/gameservice/"},{default:l(()=>n[0]||(n[0]=[s("code",null,"gameservice",-1),a(" app")])),_:1}),n[2]||(n[2]=a(") and it utilizes ")),n[3]||(n[3]=s("code",null,"crypto/hmac",-1)),n[4]||(n[4]=a(" & ")),n[5]||(n[5]=s("code",null,"crypto/sha256",-1)),n[6]||(n[6]=a(" from Go's standard library in order to produce the randomly generated bytes. This algorithm is exclusively invoked every time a random event occurs in any game built with this engine."))]),n[9]||(n[9]=o(`<p>As stated, the RNG algorithm requires these 4 input parameters:</p><ul><li><code>serverSeed</code>: A string acting as the key for the HMAC function.</li><li><code>clientSeed</code>: A user-defined string that, along with <code>nonce</code> and <code>currentRound</code>, forms the message to be hashed.</li><li><code>nonce</code>: An integer used to introduce uniqueness in the hash computation. Used to randomize different rounds for a given server seed and client seed for a particular player.</li><li><code>cursor</code>: An integer indicating the starting position in the 32 byte output from the HMAC function.</li></ul><p>The latter 3 values are merged into a single &#39;message&#39; and written into the HMAC function and the final hash (as byte stream) is computed. The algorithm streams 4 bytes at a time. 4 bytes being the amount required to build a 32-bit random floating point value. Therefore, each stream of 4 bytes is equivalent to a single random number.</p><p>The algorithm allows for an infinite byte stream starting from <code>cursor</code>, which is crucial for games which require many random events in a single round. If the full 32-byte output of the HMAC-SHA256 function are utilised within a single round, the HMAC function is invoked again and algorithm starts reading from cursor position again.</p><p>This approach is provably fair. Which means that given a server seed, client seed &amp; nonce, any game round can be reproducible. Since the client seed is completely controlled by the player &amp; can be changed anytime (except during a game), the casino does not have the ability to tamper with the RNG or the game outcome in general.</p><p>Below is the Random Number Generator function:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token comment">// byteGenerator generates a \`count\` amount of bytes based </span></span>
<span class="line"><span class="token comment">// on the provided seeds and nonce starting at position \`cursor\`.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">byteGenerator</span><span class="token punctuation">(</span>serverSeed <span class="token builtin">string</span><span class="token punctuation">,</span> clientSeed <span class="token builtin">string</span><span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">byte</span> <span class="token punctuation">{</span></span>
<span class="line">	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">		<span class="token comment">// to starts a completely new hash after the full 32 bytes are used </span></span>
<span class="line">		currentRound <span class="token operator">:=</span> cursor <span class="token operator">/</span> <span class="token number">32</span></span>
<span class="line">		<span class="token comment">// The position to start reading the HMAC digest from</span></span>
<span class="line">		currentRoundCursor <span class="token operator">:=</span> cursor <span class="token operator">%</span> <span class="token number">32</span></span>
<span class="line">		bytesGenerated <span class="token operator">:=</span> <span class="token number">0</span></span>
<span class="line">		<span class="token keyword">for</span> bytesGenerated <span class="token operator">&lt;</span> count <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// generate hash from input</span></span>
<span class="line">			<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>serverSeed<span class="token punctuation">)</span></span>
<span class="line">			hmac <span class="token operator">:=</span> hmac<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>sha256<span class="token punctuation">.</span>New<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span>
<span class="line">            msg <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s:%d&quot;</span><span class="token punctuation">,</span> clientSeed<span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">,</span> currentRound<span class="token punctuation">)</span></span>
<span class="line">			hmac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			buffer <span class="token operator">:=</span> hmac<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// send hash to channel, 1 byet at a tiem</span></span>
<span class="line">			<span class="token keyword">for</span> currentRoundCursor <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token punctuation">{</span></span>
<span class="line">				ch <span class="token operator">&lt;-</span> buffer<span class="token punctuation">[</span>currentRoundCursor<span class="token punctuation">]</span></span>
<span class="line">				currentRoundCursor<span class="token operator">++</span></span>
<span class="line">				bytesGenerated<span class="token operator">++</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// Hash depleted. Reset cursor and re generate hash from a new \`currentRound\`</span></span>
<span class="line">			currentRoundCursor <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">			currentRound<span class="token operator">++</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> ch</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r RandomGenerator<span class="token punctuation">)</span> <span class="token function">GenerateFloats</span><span class="token punctuation">(</span>serverSeed<span class="token punctuation">,</span> clientSeed <span class="token builtin">string</span><span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;count paramter should be greater than 0&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	rng <span class="token operator">:=</span> <span class="token function">byteGenerator</span><span class="token punctuation">(</span>serverSeed<span class="token punctuation">,</span> clientSeed<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> count <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">	byteSet <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// aggregate to sets of 4 bytes for a single random float</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>byteSet<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		b <span class="token operator">:=</span> <span class="token operator">&lt;-</span>rng</span>
<span class="line">		byteSet <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>byteSet<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	floats <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> floats <span class="token punctuation">{</span></span>
<span class="line">		chunk <span class="token operator">:=</span> byteSet<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">		<span class="token keyword">var</span> value <span class="token builtin">uint32</span></span>
<span class="line">		<span class="token comment">// big endian so that the most significant bit is stored first, to produce large values from the &quot;similar&quot; chunks</span></span>
<span class="line">		err <span class="token operator">:=</span> binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token comment">// divide by 2 ** 32 to get value between 0 and 1</span></span>
<span class="line">		floats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> floats<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To generate a random numbers the call is simply this:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">randFloat<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>RNG<span class="token punctuation">.</span><span class="token function">GenerateFloats</span><span class="token punctuation">(</span><span class="token string">&quot;server seed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client seed&quot;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To show that the output is a uniformly distributed set of floats between 0 and 1. Running the above command in a loop incrementing the nonce each time produced the below distribution:</p>`,10))])}const b=e(r,[["render",d],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/rng/","title":"Random Number Generator (RNG)","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1741432051000,"contributors":[{"name":"cybeni","username":"cybeni","email":"mail2048@pm.me","commits":1,"url":"https://github.com/cybeni"}],"changelog":[{"hash":"119f5466c2a6a93e115bbe6481b69a140feb7248","date":1741432051000,"email":"mail2048@pm.me","author":"cybeni","message":"initial commit","commitUrl":"https://github.com/bernardcosta/Tangiers/commit/119f5466c2a6a93e115bbe6481b69a140feb7248"}]},"filePathRelative":"rng/README.md"}');export{b as comp,v as data};
